<?php 
/*
* Creating a function to create our CPT
*/
  
function custom_post_type() {
  
    // Set UI labels for Custom Post Type
        $labels = array(
            'name'                => _x( 'Tours', 'Post Type General Name', 'twentytwentyone' ),
            'singular_name'       => _x( 'Tour', 'Post Type Singular Name', 'twentytwentyone' ),
            'menu_name'           => __( 'Tours', 'twentytwentyone' ),
            'parent_item_colon'   => __( 'Parent Tour', 'twentytwentyone' ),
            'all_items'           => __( 'All Tours', 'twentytwentyone' ),
            'view_item'           => __( 'View Tour', 'twentytwentyone' ),
            'add_new_item'        => __( 'Add New Tour', 'twentytwentyone' ),
            'add_new'             => __( 'Add New', 'twentytwentyone' ),
            'edit_item'           => __( 'Edit Tour', 'twentytwentyone' ),
            'update_item'         => __( 'Update Tour', 'twentytwentyone' ),
            'search_items'        => __( 'Search Tour', 'twentytwentyone' ),
            'not_found'           => __( 'Not Found', 'twentytwentyone' ),
            'not_found_in_trash'  => __( 'Not found in Trash', 'twentytwentyone' ),
        );
          
    // Set other options for Custom Post Type
          
        $args = array(
            'label'               => __( 'Tours', 'twentytwentyone' ),
            'description'         => __( 'Tour news and reviews', 'twentytwentyone' ),
            'labels'              => $labels,
            // Features this CPT supports in Post Editor
            'supports'            => array( 'title', 'editor', 'excerpt', 'author', 'thumbnail', 'comments', 'revisions', 'custom-fields', ),
            // You can associate this CPT with a taxonomy or custom taxonomy. 
            'taxonomies'          => array( 'genres' ),
            /* A hierarchical CPT is like Pages and can have
            * Parent and child items. A non-hierarchical CPT
            * is like Posts.
            */
            'hierarchical'        => false,
            'public'              => true,
            'show_ui'             => true,
            'show_in_menu'        => true,
            'show_in_nav_menus'   => true,
            'show_in_admin_bar'   => true,
            'menu_position'       => 5,
            'can_export'          => true,
            'has_archive'         => true,
            'exclude_from_search' => false,
            'menu_icon'           => 'dashicons-admin-home',
            'publicly_queryable'  => true,
            'capability_type'     => 'post',
            'show_in_rest' => true,
      
        );
          
        // Registering your Custom Post Type
        register_post_type( 'tours', $args );
      
    }
      
    /* Hook into the 'init' action so that the function
    * Containing our post type registration is not 
    * unnecessarily executed. 
    */
      
    add_action( 'init', 'custom_post_type', 0 );


function wdm_add_rewrite_rules()
{
    add_rewrite_rule( '^test/([^/]+)/overview/?$','index.php?author_name=$matches[1]&wdm_overview=1','top');
}
add_action('init','wdm_add_rewrite_rules');


function add_custom_meta_boxes() {
	add_meta_box( 
		'wp_tour_zip_upload',
		'Tours Zip File',
		'wp_tour_zip_upload',
		'tours',
		'advanced',
        'high'
	) ;
}
add_action( 'add_meta_boxes', 'add_custom_meta_boxes' );

function wp_tour_zip_upload() {
	wp_nonce_field( plugin_basename(__FILE__), 'wp_tour_zip_upload_nonce' );
	$html = '<p class="description">Upload your Zip here.</p>';
	$html .= '<input id="wp_tour_zip_upload" name="wp_tour_zip_upload" size="25" type="file" value="" />';

	$filearray = get_post_meta( get_the_ID(), 'wp_tour_zip_upload', true );
	
	echo $html; 
}

function save_custom_meta_data( $id ) {
	if ( ! empty( $_FILES['wp_tour_zip_upload']['name'] ) ) {
		$supported_types = array( 'application/zip' );
		$arr_file_type = wp_check_filetype( basename( $_FILES['wp_tour_zip_upload']['name'] ) );
		$uploaded_type = $arr_file_type['type'];

		if ( in_array( $uploaded_type, $supported_types ) ) {			
            
            $name_file  = get_post_field( 'post_name',$id ).'.zip';                    
            $foldername= get_post_field( 'post_name',$id );
            $upload_dir = get_stylesheet_directory();                       

            $filename = wp_unique_filename( $user_dirname, $_FILES['file']['name'] );
            move_uploaded_file($_FILES['wp_tour_zip_upload']['tmp_name'], $upload_dir .'/tours_source/'. $name_file);
            // save into database $upload_dir['baseurl'].'/product-images/'.$filename;
            
            if (!file_exists($upload_dir .'/tours_source/'.$foldername)) {                
                mkdir($upload_dir .'/tours_source/'.$foldername, 0777, true);                
            }
            sleep(5);
            WP_Filesystem();
            $destination = wp_upload_dir();
            $destination_path = $destination['path'];
            $unzipfile = unzip_file( $upload_dir .'/tours_source/'. $name_file, $upload_dir .'/tours_source/'.$foldername);

            if ( $unzipfile ) {
                echo 'Successfully unzipped the file!';       
            } else {
                echo 'There was an error unzipping the file.';       
            }


           
			
		}
		else {
			wp_die( "The file type that you've uploaded is not a PDF." );
		}
	}
}
add_action( 'save_post', 'save_custom_meta_data' );

function update_edit_form() {
	echo ' enctype="multipart/form-data"';
}
add_action( 'post_edit_form_tag', 'update_edit_form' );
function child_enqueue_styles() {

	// dequeue the Twenty Twenty-One parent style
	wp_dequeue_style( 'twenty-twenty-one-style' );
    
	// Theme stylesheet
	wp_enqueue_style( 'child-style', get_stylesheet_uri(), array(), wp_get_theme()->get('Version') );

}
add_action( 'wp_enqueue_scripts', 'child_enqueue_styles', 11 );

add_action("wp_ajax_owner_user_login", "owner_user_login");
add_action("wp_ajax_nopriv_owner_user_login", "owner_user_login");

function owner_user_login() {
    if ( empty( $credentials ) ) {
		$credentials = array(); 
		if ( ! empty( $_POST['email'] ) ) {
			$credentials['user_login'] = wp_unslash( $_POST['email'] );
		}
		if ( ! empty( $_POST['password'] ) ) {
			$credentials['user_password'] = $_POST['password'];
		}
		if ( ! empty( $_POST['rememberme'] ) ) {
			$credentials['remember'] = $_POST['rememberme'];
		}
	}
	if ( ! empty( $credentials['remember'] ) ) {
		$credentials['remember'] = true;
	} else {
		$credentials['remember'] = false;
	}    
    $user = wp_signon( $credentials, false );
	if ( is_wp_error( $user ) ) {
		echo $user->get_error_message();exit;
	}else{        
        echo 1;exit;
    }
}


add_action("wp_ajax_owner_user_register", "owner_user_register");
add_action("wp_ajax_nopriv_owner_user_register", "owner_user_register");

function owner_user_register() {
    $email = $_POST['email'];
    $first_name = $_POST['first_name'];
    $last_name = $_POST['last_name'];
    $password = $_POST['password'];
    $conf_password = $_POST['conf_password'];
    $usertype = $_POST['usertype'];

    if (email_exists( $email ) ) {
        echo 'User already exists';exit;
    }
    if($password!= $conf_password){
        echo 'Password and Confirm not match';exit;
    }
    
    $user_id = wp_create_user( $email, $password, $email );
	if ( is_wp_error( $result ) ) {
		echo $user->get_error_message();exit;
	}else{ 
        $user = get_user_by( 'id', $user_id );
        $user->remove_role( 'subscriber' ); 
        if($usertype==1){
            $user->set_role( 'owner' );  
        }else{
            $user->set_role( 'viewer' );  
        }   
        
        wp_update_user( array ('ID' => $user_id, 'display_name' => $first_name.' '.$last_name,'first_name' => $first_name,'last_name' => $last_name));        
        echo 1;exit;
    }
}

function custom_fun_restrict_admin() {
    if ( defined( 'DOING_AJAX' ) && DOING_AJAX ) {
        return;
    }
    if ( ! current_user_can( 'manage_options' ) ) {
        wp_redirect( home_url() );
        exit;
    }
}
add_action( 'admin_init', 'custom_fun_restrict_admin', 1 );

add_action("wp_ajax_tour_edit_ajax", "tour_edit_ajax_fun");
add_action("wp_ajax_nopriv_tour_edit_ajax", "tour_edit_ajax_fun");

function tour_edit_ajax_fun() {
    $tourid = $_POST['tourid'];
    $logo= get_field('logo',$tourid); 
    $tour_type= get_field('tour_type',$tourid); 
    $info_below_logo= get_field('info_below_logo',$tourid); 
    $tag_lines_and_name= get_field('tag_lines_and_name',$tourid); 
    $tv_video_url= get_field('tv_video_url',$tourid); 
    $bottom_logo= get_field('bottom_logo',$tourid); 
    $bottom_disclaimer_text= get_field('bottom_disclaimer_text',$tourid); 

?>
<form class="edti-tour-form-byowner" id="edti-tour-form-byowner" method="post" enctype="multipart/form-data">
    <input type="hidden" value="<?php echo $tourid;?>" name="tourid">
    <input type="hidden" value="<?php echo $tour_type;?>" name="tour_type">
    <input type="hidden" value="update_tour_form_byowner" name="action">

    <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Edit : <?php echo get_the_title($tourid);?></h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
    </div>
    <div class="modal-body">
        <div class="form-group">
            <div class="row">
                <div class="col-sm-6">
                    <label for="exampleInputEmail1"><strong>Logo</strong></label>
                    <input type="file" class="form-control" name="logo">
                </div>
                <div class="col-sm-6">
                    <label for="exampleInputEmail1">Preview</label><br>
                    <img width="150" src="<?php echo $logo;?>">
                </div>
            </div>
        </div>
        <div class="form-group">
            <hr />
            <?php if($tour_type==1){ ?>
            <label><strong>Tag line</strong></label>
            <textarea class="form-control" name="info_below_logo"><?php echo $info_below_logo; ?></textarea>
            <?php }else{?>
            <label><strong>Tag Lines and Name</string></label>

            <div class="row">
                <?php
                if($tag_lines_and_name){
                foreach ($tag_lines_and_name as $key => $value) {?>
                <div class="col-sm-6">
                    <label>Tour Name</label>
                    <input type="text" class="form-control" name="tour_name[]" required
                        value="<?php echo $value['tour_name']; ?>">
                </div>
                <div class="col-sm-6">
                    <label>Tour Tag line</label>
                    <textarea class="form-control" name="tour_tag_line[]"
                        required><?php echo $value['tour_tag_line']; ?></textarea>
                </div>
                <?php } ?>
                <?php } ?>
            </div>
            <?php } ?>
        </div>
        <div class="form-group">
            <hr />
            <label><strong>Tv videos and thumbnails</strong></label>

            <div class="row">
                <?php if($tv_video_url){
                 foreach ($tv_video_url as $key => $value) {
                    $getfiletype= explode('.',$value['video']);  
                 ?>
                <div class="col-sm-2 removevideogrp<?php echo $key; ?> position-relative">
                    <input type="hidden" name="tv_video_url[]"
                        value="<?php echo attachment_url_to_postid($value['video']);?>">
                    <label for="exampleInputEmail1">Preview</label><br>
                    <?php if(end($getfiletype)!='mp4'){ ?>
                    <img width="100" height="100" src="<?php echo $value['video'];?>">
                    <?php }else{ ?>
                    <video width="100" height="100" class="src_url" src="<?php echo $value['video'];?>"
                        id="brick<?php echo $key; ?>" crossorigin="anonymous" autoplay muted loop>
                    </video>
                    <?php } ?>
                    <a href="javascript:void(0);" class="removevideojs" data-group="<?php echo $key; ?>"><svg
                            xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                            class="bi bi-trash text-danger" viewBox="0 0 16 16">
                            <path
                                d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                            <path fill-rule="evenodd"
                                d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                        </svg>
                    </a>
                </div>

                <?php  }  ?>
                <?php } ?>
                <div class="col-sm-12">

                    <label class="pt-2" for="exampleInputEmail1">Add more</label>
                    <input type="file" class="form-control" name="tv_video_url_new[]" multiple>
                </div>
            </div>
            <hr />
        </div>
        <div class="form-group">
            <div class="row">
                <div class="col-sm-6">
                    <label for="exampleInputEmail1"><strong>Bottom logo</strong></label>
                    <input type="file" class="form-control" name="bottom_logo">
                </div>
                <div class="col-sm-6">
                    <label for="exampleInputEmail1">Preview</label><br>
                    <img width="150" src="<?php echo $bottom_logo;?>">
                </div>
            </div>
        </div>

        <div class="form-group">
            <label><strong>Bottom disclaimer text</strong></label>
            <textarea class="form-control"
                name="bottom_disclaimer_text"><?php echo $bottom_disclaimer_text;?></textarea>
        </div>

    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="submit" class="btn btn-primary">Save changes</button>
    </div>
</form>
<?php
exit;
}
function cc_mime_types($mimes) {
    $mimes['svg'] = 'image/svg+xml';
    return $mimes;
  }
add_filter('upload_mimes', 'cc_mime_types');

  
add_action("wp_ajax_update_tour_form_byowner", "update_tour_form_byowner_fun");
add_action("wp_ajax_nopriv_update_tour_form_byowner", "update_tour_form_byowner_fun");
/*
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);*/

function update_tour_form_byowner_fun() {
        
    $tourid = $_POST['tourid'];
    $tour_type = $_POST['tour_type'];
    $logo = $_POST['logo'];
    $info_below_logo = $_POST['info_below_logo'];
    $tour_name = $_POST['tour_name'];
    $tour_tag_line = $_POST['tour_tag_line'];
    $tv_video_url = $_POST['tv_video_url'];
    $tv_video_url_new = $_POST['tv_video_url_new'];
    $bottom_logo = $_POST['bottom_logo'];
    $bottom_disclaimer_text = $_POST['bottom_disclaimer_text'];
    
    
    if($info_below_logo){
        update_field('info_below_logo', $info_below_logo, $tourid);
    }
    if($bottom_disclaimer_text){
        update_field('bottom_disclaimer_text', $bottom_disclaimer_text, $tourid);
    }

    if($tour_name){
        if(count($tour_name)){
            $name_row=array();
            foreach ($tour_name as $key => $tour_name_value) {
                $single=array();
                $single['tour_name'] = $tour_name_value;
                $single['tour_tag_line'] = $tour_tag_line[$key];
                $name_row[] = $single;
            }
            if($name_row){
                update_field('tag_lines_and_name', $name_row , $tourid);
            }    
        }
    }
    
    if(isset($_FILES['logo']['name']) && $_FILES['logo']['name']!=''){
        
    $logo_filename= $_FILES['logo']['name'];
    $logo_file=wp_upload_bits($logo_filename, null, file_get_contents($_FILES['logo']['tmp_name']));      
        if ($logo_file['error'] === false) {            
            $attachment = array(
                'post_mime_type' => $logo['type'],
                'post_title' => $logo_filename,
                'post_content' => '',
                'post_status' => 'inherit'
            );        
            $attach_id = wp_insert_attachment($attachment, $logo_file['file']);        
            $attach_data = wp_generate_attachment_metadata($attach_id, $logo_file['file']);
            wp_update_attachment_metadata($attach_id, $attach_data);
            update_field('logo', $attach_id, $tourid);
        }
    }
    
    if(isset($_FILES['bottom_logo']['name']) && $_FILES['bottom_logo']['name']!=''){
        $bottom_logo_filename= $_FILES['bottom_logo']['name'];
        $bottom_logo_file=wp_upload_bits($bottom_logo_filename, null, file_get_contents($_FILES['bottom_logo']['tmp_name']));              
        if ($bottom_logo_file['error'] === false) {            
            $attachment = array(
                'post_mime_type' => $bottom_logo['type'],
                'post_title' => $bottom_logo_filename,
                'post_content' => '',
                'post_status' => 'inherit'
            );        
            $attach_id = wp_insert_attachment($attachment, $bottom_logo_file['file']);        
            $attach_data = wp_generate_attachment_metadata($attach_id, $bottom_logo_file['file']);
            wp_update_attachment_metadata($attach_id, $attach_data);
            update_field('bottom_logo', $attach_id, $tourid);
        }
    }


    
    if(isset($_FILES['tv_video_url_new']['name'][0]) && $_FILES['tv_video_url_new']['name'][0]!=''){
        
        $countfiles = count($_FILES['tv_video_url_new']['name']);
        
        $multi_attac_id = array();
        if($countfiles){    
            for($i=0;$i<$countfiles;$i++){
                $tv_video_url_new_filename= $_FILES['tv_video_url_new']['name'][$i];
                $tv_video_url_new_file=wp_upload_bits($tv_video_url_new_filename, null, file_get_contents($_FILES['tv_video_url_new']['tmp_name'][$i]));              
                if ($tv_video_url_new_file['error'] === false) {            
                    $attachment = array(
                        'post_mime_type' => $tv_video_url_new['type'],
                        'post_title' => $tv_video_url_new_filename,
                        'post_content' => '',
                        'post_status' => 'inherit'
                    );        
                    $attach_id = wp_insert_attachment($attachment, $tv_video_url_new_file['file']);        
                    $attach_data = wp_generate_attachment_metadata($attach_id, $tv_video_url_new_file['file']);
                    wp_update_attachment_metadata($attach_id, $attach_data);                
                    $multi_attac_id[]['video']=$attach_id;
                }        
            }
        }
        if($tv_video_url){             
            foreach ($tv_video_url as $key => $value) {
                $multi_attac_id[]['video']=$value;
            }         
        }
        update_field('tv_video_url', $multi_attac_id , $tourid);
    }    
    exit;
}


add_action( 'add_meta_boxes', 'add_custom_box_wpse_94701' );
add_action( "admin_print_scripts-post.php", 'enqueue_ajax_wpse_97845' );
add_action( 'wp_ajax_update_metabox_wpse_97845', 'update_metabox_wpse_97845' );

function add_custom_box_wpse_94701() 
{
    add_meta_box(
        'sectionid_wpse_94701',
        __( 'Tours Duplicate' ), 
        'copy_post_box_wpse_94701',
        'tours',
        'side'
    );
}

function copy_post_box_wpse_94701() 
{
    global $wpdb,$post;    
    echo '<table style="width: 100%;">
       <tr>
        <td><lable><b>Title</b></lable><br/><input style="width: 100%" type="text" value="" name="dup_post_title"></td>
       </tr> 
       <tr>
        <td><lable><b>Slug</b></lable><br/><input style="width: 100%" type="text" value="" name="dup_post_slug"></td>
       </tr> 
    </table><br/>';
    echo "<a class='button-secondary' href='#' title='Duplicate post' style='padding-top:4px;' id='publish-to-other-blog' name='$post->ID'>Duplicate</a>&nbsp; <span class='spinner sp-show-spinner'></span>";

    // Error and success messages
    echo '<div class="updated below-h2" id="ajax-success" style="display:none">updated</div>';
    echo '<div class="form-invalid" id="ajax-error" style="display:none">form-invalid</div>';


}

function enqueue_ajax_wpse_97845()
{
    // Check post type
    global $typenow;
    if( 'tours' != $typenow )
        return;

    wp_enqueue_script( 'wpse_97845_js', get_stylesheet_directory_uri( '/', __FILE__ ) . '/assets/js/mu-copy-post.js' );

    wp_localize_script( 
            'wpse_97845_js', 
            'wp_ajax', 
            array( 
                'ajaxurl' => admin_url( 'admin-ajax.php' ),
                'ajaxnonce' => wp_create_nonce( 'wpse_97845_validation' )
            ) 
    ); 
}

function update_metabox_wpse_97845()
{
    check_ajax_referer( 'wpse_97845_validation', 'ajaxnonce' );

    if( empty( $_POST['wpse_97845_post_id'] ) || empty( $_POST['wpse_97845_post_id'] ) ) {
        wp_send_json_error( array(
            'error' => __( 'Tour ID not set' ) 
        ));
    }

    // Grac actual post data and current blog ID
    $actual_post = $_POST['wpse_97845_post_id'] ;
    $new_post_title =  $_POST['wpse_97845_tour_title'] ;
    $new_post_slug =  $_POST['wpse_97845_tour_slug'] ;
    global $wpdb;
    $post_if = $wpdb->get_var("SELECT count(post_title) FROM $wpdb->posts WHERE post_name like '".$new_post_slug."'");
    if($post_if>=1){
        wp_send_json_success( "Tour slug already exists" );   
        exit;         
    }
    $thumbnail_id = get_post_thumbnail_id($actual_post);
    $meta = get_post_meta($actual_post);
    

    // Prepare cloned post
    $copy_post = array(
      'post_title' => $new_post_title,
      'post_name' => $new_post_slug,
      'post_content' => '',
      'post_status' => 'draft',
      'post_type' => 'tours'
    );
    $post_id = wp_insert_post($copy_post);    
    foreach ($meta as $key => $value) {
        add_post_meta($post_id, $key, $value[0] );
    }
    if($thumbnail_id){
        set_post_thumbnail( $post_id, $thumbnail_id );
    }   
    $foldername = get_post_field( 'post_name', $actual_post );
    $upload_dir = get_stylesheet_directory();                       
    $target_src= $upload_dir .'/tours_source/'.$foldername;
    $destination_src= $upload_dir .'/tours_source/'.$new_post_slug;
    if (!file_exists($upload_dir .'/tours_source/'.$new_post_slug)) {                
        mkdir($upload_dir .'/tours_source/'.$new_post_slug, 0777, true);                
    }
    custom_copy($target_src,$destination_src);
    $blog_name = get_option( 'blogname' );    
    wp_send_json_success( "Tour added to $blog_name with the ID of $post_id" );
    


    exit;
    
}

function custom_copy($src, $dst) {   
    // open the source directory
    $dir = opendir($src);   
    // Make the destination directory if not exist
    @mkdir($dst); 
    // Loop through the files in source directory
    while( $file = readdir($dir) ) { 
        if (( $file != '.' ) && ( $file != '..' )) { 
            if ( is_dir($src . '/' . $file) ) 
            {                 
                custom_copy($src . '/' . $file, $dst . '/' . $file);  
            } 
            else { 
                copy($src . '/' . $file, $dst . '/' . $file); 
            } 
        } 
    }   
    closedir($dir);
} 
?>